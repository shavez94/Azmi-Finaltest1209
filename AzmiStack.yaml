AWSTemplateFormatVersion: "2010-09-09"
Description: Full IaC for Azmi Final Test - ECS Fargate App with CI/CD pipeline, VPC, Load Balancer, Alarms

Parameters:
  ECRRepositoryName:
    Type: String
    Default: azmi-finaltest

  GitHubOwner:
    Type: String
    Default: shavez94

  GitHubRepo:
    Type: String
    Default: Azmi-Finaltest1209

  GitHubBranch:
    Type: String
    Default: main

  CodeStarConnectionArn:
    Type: String
    Default: arn:aws:codestar-connections:us-east-1:211125401262:connection/0df2e0a6-d6ee-438c-a029-5b31ba123b91

Resources:
  AzmiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: azmi-vpc

  AzmiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: azmi-igw

  AzmiVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AzmiVPC
      InternetGatewayId: !Ref AzmiInternetGateway

  AzmiPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AzmiVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: azmi-public-subnet-1

  AzmiPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AzmiVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: azmi-public-subnet-2

  AzmiPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AzmiVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: azmi-private-subnet-1

  AzmiPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AzmiVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: azmi-private-subnet-2

  AzmiECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: azmi-ecs-cluster

  AzmiECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: azmi-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  AzmiECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: azmi-task-definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt AzmiECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: azmi-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest
          PortMappings:
            - ContainerPort: 4000

  AzmiALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref AzmiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AzmiApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: azmi-alb
      Subnets:
        - !Ref AzmiPublicSubnet1
        - !Ref AzmiPublicSubnet2
      SecurityGroups:
        - !Ref AzmiALBSecurityGroup
      Scheme: internet-facing
      Type: application

  AzmiALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: azmi-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref AzmiVPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  AzmiALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AzmiApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AzmiALBTargetGroup

  AzmiECSService:
    Type: AWS::ECS::Service
    DependsOn: AzmiALBListener
    Properties:
      ServiceName: azmi-ecs-service
      Cluster: !Ref AzmiECSCluster
      TaskDefinition: !Ref AzmiECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref AzmiPrivateSubnet1
            - !Ref AzmiPrivateSubnet2
          SecurityGroups:
            - !Ref AzmiALBSecurityGroup
      LoadBalancers:
        - ContainerName: azmi-container
          ContainerPort: 4000
          TargetGroupArn: !Ref AzmiALBTargetGroup

  AzmiCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: azmi-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: azmi-codebuild-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"

  AzmiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: azmi-codebuild-project
      ServiceRole: !GetAtt AzmiCodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml

  AzmiPipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub azmi-artifact-bucket-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled

  AzmiCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: azmi-codepipeline-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: azmi-pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"

  AzmiCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: azmi-pipeline
      RoleArn: !GetAtt AzmiCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AzmiPipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Sub ${GitHubOwner}/${GitHubRepo}
                BranchName: !Ref GitHubBranch
        - Name: Build
          Actions:
            - Name: DockerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref AzmiCodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: "1"
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref AzmiECSCluster
                ServiceName: !Ref AzmiECSService
                FileName: imagedefinitions.json

Outputs:
  ALBEndpoint:
    Description: Public ALB URL
    Value: !GetAtt AzmiApplicationLoadBalancer.DNSName
  ECSClusterName:
    Description: Name of ECS Cluster
    Value: !Ref AzmiECSCluster
  ECSServiceName:
    Description: Name of ECS Service
    Value: !Ref AzmiECSService
  PipelineName:
    Description: Name of CodePipeline
    Value: !Ref AzmiCodePipeline
